public class AudioCollage {
    // Returns a new array that rescales a[] by a factor of alpha.
    public static double[] amplify(double[] a, double alpha) {
        double[] b = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            b[i] = a[i] * alpha;
        }
        return b;
    }

    // Returns a new array that is the reverse of a[].
    public static double[] reverse(double[] a) {
        double[] a2 = new double[a.length];
        int n = 0;
        for (int i = a.length - 1; i >= 0; i--) {
            a2[n] = a[i];
            n++;
        }
        return a2;
    }

    // Returns a new array that is the concatenation of a[] and b[].
    public static double[] merge(double[] a, double[] b) {
        double[] c = new double[a.length + b.length];
        for (int i = 0; i < a.length; i++) {
            c[i] = a[i];
        }
        for (int i = 0; i < b.length; i++) {
            c[i + a.length] = b[i];
        }
        return c;
    }

    // Returns a new array that is the sum of a[] and b[],
    // padding the shorter array with trailing 0s if necessary.
    public static double[] mix(double[] a, double[] b) {
        double[] c;
        if (a.length > b.length) {
            c = new double[a.length];
            int i;
            for (i = 0; i < b.length; i++) {
                c[i] = a[i] + b[i];
            }
            for (int x = i; x < a.length; x++) {
                c[x] = a[x];
            }
        }
        else {
            c = new double[b.length];
            int i;
            for (i = 0; i < a.length; i++) {
                c[i] = a[i] + b[i];
            }
            for (int x = i; x < b.length; x++) {
                c[x] = b[x];
            }
        }
        return c;
    }

    // Returns a new array that changes the speed of a[] by a factor of alpha.
    public static double[] changeSpeed(double[] a, double alpha) {
        double[] c = new double[(int) (a.length / alpha)];
        for (int i = 0; i < c.length; i++) {
            c[i] = a[(int) (Math.floor(i * alpha))];
        }
        return c;
    }

    // Returns a new array that repeats a[] for indicated number of repeats
    private static double[] repeat(double[] a, int repeats) {
        double[] b = new double[a.length * repeats];
        for (int i = 0; i < repeats; i++) {
            for (int j = 0; j < a.length; j++) {
                b[j + (a.length * i)] = a[j];
            }
        }
        return b;
    }

    // Returns a[] where all values less than -1.0 are replaced with -1.0 and all
    // values greater than 1.0 are replaced with 1.0
    private static double[] clamp(double[] a) {
        for (int i = 0; i < a.length; i++) {
            if (a[i] < -1) {
                a[i] = -1;
            }
            if (a[i] > 1) {
                a[i] = 1;
            }
        }
        return a;
    }

    // Creates an audio collage and plays it on standard audio.
    // See below for the requirements.
    public static void main(String[] args) {
        double[] cow = StdAudio.read("cow.wav");
        double[] afrobeat = StdAudio.read("afrobeat.wav");
        double[] beatbox = StdAudio.read("beatbox.wav");
        double[] drum = StdAudio.read("drum.wav");
        double[] chimes = StdAudio.read("chimes.wav");
        double[] cowsped = changeSpeed(amplify(cow, 0.25), 2);
        double[] cowafro = mix(repeat(cowsped, 2), changeSpeed(afrobeat, 0.75));
        double[] beatbuzz = changeSpeed(
                mix(changeSpeed(
                        reverse(beatbox), 0.75), changeSpeed(chimes, 2.5)), 0.5);
        double[] finalpiece = merge(
                mix(drum, changeSpeed(chimes, 1.5)), mix(cowafro, beatbuzz));
        StdAudio.play(clamp(finalpiece));
    }
}
